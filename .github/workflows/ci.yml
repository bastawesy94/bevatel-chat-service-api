name: CI/CD Pipeline

# Workflow is triggered on pull requests and pushes
on:
  pull_request:
    branches:
      - develop
      - production
  push:
    branches:
      - production

jobs:
  # CI job for PRs to develop and production
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run lint
      - name: Run lint
        run: npm run lint

      # Step 5: Run tests
      - name: Run tests
        run: npm run test

  # Job to build Docker image after merging to production
  build-production:
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js and install dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      # Step 3: Log into Docker Hub
      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Get current version from package.json and increment the patch version
      - name: Increment version
        id: versioning
        run: |
          current_version=$(cat package.json | jq -r .version)
          IFS='.' read -r major minor patch <<< "$current_version"
          new_version="$major.$minor.$((patch + 1))"
          echo "::set-output name=version::$new_version"

      # Step 5: Build Docker image with version tag
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bevatel-chat-service-api:${{ steps.versioning.outputs.version }} .

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/bevatel-chat-service-api:${{ steps.versioning.outputs.version }}
